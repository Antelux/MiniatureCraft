--[[
	Simplex Noise Module, Translated by Levybreak, Modified by Detective_Smith.
	Original Source: http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf
	Translated Source: https://dl.dropboxusercontent.com/u/99862/SimplexNoise.lua
--]]

local Gradients2D = {{1,1}, {-1,1}, {1,-1}, {-1,-1}, {1,0}, {-1,0}, {1,0}, {-1,0}, {0,1}, {0,-1}, {0,1}, {0,-1}}
for i = 1, #Gradients2D do Gradients2D[i - 1] = Gradients2D[i] end; Gradients2D[#Gradients2D] = nil

local perm = {151,160,137,91,90,15,
131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180}

for i = 0, 255 do perm[i] = perm[i + 1]; perm[i + 256] = perm[i] end
perm[255], perm[511] = 180, 180

local abs, max, sqrt, floor = math.abs, math.max, math.sqrt, math.floor
local F2, G2 = 0.5 * (sqrt(3) - 1), (3 - sqrt(3)) / 6; local G22 = G2 * 2
local band = bit.band

local Noise = {
	-- This function is based on a post on google groups.
	-- Found at: https://groups.google.com/forum/#!topic/toxiclibs-users/nFxU1zpr0C8
	Seed = function(seed)
		if type(seed) == "table" then perm = seed; return end
		if type(seed) == "number" then
			for i = 0, 512 do
			    local shift = (i + seed) % 512
			    perm[i] = perm[band(shift, 255)] 
			end
		end
		return perm
	end,
	
	Simplex = function(xin, yin)
		local s = (xin + yin) * F2
		local i = floor(xin + s)
		local j = floor(yin + s)
		
		local t = (i + j) * G2
		local X0 = i - t
		local Y0 = j - t
		local x0 = xin - X0
		local y0 = yin - Y0
			
		local x0_larger = x0 > y0
		local i1 = x0_larger and 1 or 0
		local j1 = x0_larger and 0 or 1
		
		local x1 = x0 - i1 + G2
		local y1 = y0 - j1 + G2
		local x2 = x0 - 1 + G22
		local y2 = y0 - 1 + G22

		local ii = band(i , 255)
		local jj = band(j , 255)
		local index1 = Gradients2D[perm[ii + perm[jj]] % 12]
		local index2 = Gradients2D[perm[ii + i1 + perm[jj + j1]] % 12]
		local index3 = Gradients2D[perm[ii + 1 + perm[jj + 1]] % 12]

		local t0 = 0.5 - x0 * x0 - y0 * y0
		local t0_small = t0 < 0; t0 = t0_small and t0 or t0 * t0
		local noise = t0_small and 0 or t0 * t0 * (index1[1]*x0 + index1[2]*y0)
		
		local t1 = 0.5 - x1 * x1 - y1 * y1
		local t1_smaller = t1 < 0; t1 = t1_smaller and t1 or t1 * t1 
		noise = noise + (t1_smaller and 0 or t1 * t1 * (index2[1]*x1 + index2[2]*y1))
		
		local t2 = 0.5 - x2 * x2 - y2 * y2
		local t2_smaller = t2 < 0; t2 = t2_smaller and t2 or t2 * t2
		noise = noise + (t2_smaller and 0 or t2 * t2 * (index3[1]*x2 + index3[2]*y2))

		return 70 * noise
	end
}

-- FBM Stands for Fractional Brownian Motion
-- More about it here: https://code.google.com/p/fractalterraingeneration/wiki/Fractional_Brownian_Motion
local Noise_Simplex = Noise.Simplex
function Noise.FBM(octaves, x, y, persistence, freq)
    local maxAmp, amp, noise = 0, 1, 0

    for i = 1, octaves do
        noise = noise + Noise_Simplex(x * freq, y * freq) * amp
        maxAmp = maxAmp + amp
        amp = amp * persistence
        freq = freq * 2
    end

    return ((noise / maxAmp) + 1) * 0.5
end

return Noise
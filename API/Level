_G.Level = {}
local Assets = File.loadAssets()
local OffsetX, OffsetY = 0, 0
local currentWorld
local lightingMap = {}
local currentTime
local spawnPoint = {}

local function mapLoop(world, dim, func, sx, sy, ex, ey)
  if not world or not world[dim] then return end
  local sx = sx or 1
  local ex = ex or world["size"][1]
  local sy = sy or 1
  local ey = ey or world["size"][2] 

  for x = sx, ex do 
    for y = sy, ey do
      func(x, y, {["left"] = world[dim][x - 1][y], 
                  ["right"] = world[dim][x + 1][y], 
                  ["up"] = world[dim][x][y - 1], 
                  ["down"] = world[dim][x][y + 1], 
                  ["center"] = world[dim][x][y], 
                  ["upleft"] = world[dim][x - 1][y - 1], 
                  ["upright"] = world[dim][x + 1][y - 1], 
                  ["downleft"] = world[dim][x - 1][y + 1],
                  ["downright"] = world[dim][x + 1][y + 1]}, world) 
    end
  end
  os.queueEvent("yield")
  os.pullEvent("yield")

  return world
end

local function mapBrush(world, dim, x, y, asset, size)
  local sizeModifier = math.random(size) 

  for radius = 1, size, 0.1 do
    local radStep = 1 / (sizeModifier * radius)
    for angle = 1, math.pi + radStep, radStep do
      local pX = (math.cos(angle) * radius * sizeModifier) + math.random(-0.5, 0.5)
      local pY = (math.sin(angle) * radius) + math.random(-0.5, 0.5)
      for i = -1, 1, 2 do
        for j = -1, 1, 2 do
          if asset.Block then 
            if #Assets[asset.Block].texture > 3 then world[dim][math.floor(x + i * pX)][math.floor(y + j * pY)].Block = {ID = asset.Block, currentAnimation = math.random(#Assets[asset.Block].texture / 3), totalAnimation = #Assets[asset.Block].texture / 3} 
            else world[dim][math.floor(x + i * pX)][math.floor(y + j * pY)].Block = {ID = asset.Block} end
          elseif asset.Block == false then world[dim][math.floor(x + i * pX)][math.floor(y + j * pY)].Block = {ID = false} end

          if asset.Tile then 
            if #Assets[asset.Tile].texture > 3 then world[dim][math.floor(x + i * pX)][math.floor(y + j * pY)].Tile = {ID = asset.Tile, currentAnimation = math.random(#Assets[asset.Tile].texture / 3), totalAnimation = #Assets[asset.Tile].texture / 3} 
            else world[dim][math.floor(x + i * pX)][math.floor(y + j * pY)].Tile = {ID = asset.Tile} end
          elseif asset.Tile == false then world[dim][math.floor(x + i * pX)][math.floor(y + j * pY)].Tile = {ID = false} end
        end
      end
    end
  end

  return world
end

local function addLight(dim, x, y, size)
  for radius = 1, size, 0.1 do
    local radStep = 1 / radius
    for angle = 1, math.pi + radStep, radStep do
      local pX = (math.cos(angle) * radius)
      local pY = (math.sin(angle) * radius) 
      for i = -1, 1, 2 do
        for j = -1, 1, 2 do
          lightingMap[dim] = {}
          lightingMap[dim][math.floor(x + i * pX)] = {}
          lightingMap[dim][math.floor(x + i * pX)][math.floor(y + j * pY)] = true
        end
      end
    end
  end
end

function Level.getTexture(dim, x, y, useAnimations)
  if type(dim) ~= "number" or type(x) ~= "number" or type(6) ~= "number" then return end

  local useAnimations = useAnimations or true
  local tile = currentWorld[dim][x][y].Tile
  local block = currentWorld[dim][x][y].Block
  local length, width = currentWorld["size"][1], currentWorld["size"][2]

  if type(block.ID) == "number" and Assets[block.ID] then
    if block.currentAnimation and useAnimations then
      block.currentAnimation = block.currentAnimation + 1
      if block.currentAnimation > block.totalAnimation then block.currentAnimation = 1 end
      currentWorld[dim][x][y].Block = block

      -- Background Color, Foreground Color, Foreground Character
      return Assets[block.ID].texture[(block.currentAnimation * 2) + (block.currentAnimation - 2)] or Assets[tile.ID].texture[1], Assets[block.ID].texture[(block.currentAnimation * 2) + (block.currentAnimation - 2) + 1] or Assets[tile.ID].texture[2], Assets[block.ID].texture[(block.currentAnimation * 2) + (block.currentAnimation - 2) + 2] or Assets[tile.ID].texture[3]
    else
      return Assets[block.ID].texture[1] or Assets[tile.ID].texture[1], Assets[block.ID].texture[2] or Assets[tile.ID].texture[2], Assets[block.ID].texture[3] or Assets[tile.ID].texture[3]
    end

  elseif type(tile.ID) == "number" and Assets[tile.ID] then
    if tile.currentAnimation and useAnimations then
      tile.currentAnimation = tile.currentAnimation + 1
      if tile.currentAnimation > tile.totalAnimation then tile.currentAnimation = 1 end
      currentWorld[dim][x][y].Tile = tile

      -- Background Color, Foreground Color, Foreground Character
      return Assets[tile.ID].texture[(tile.currentAnimation * 2) + (tile.currentAnimation - 2)], Assets[tile.ID].texture[(tile.currentAnimation * 2) + (tile.currentAnimation - 2) + 1], Assets[tile.ID].texture[(tile.currentAnimation * 2) + (tile.currentAnimation - 2) + 2]
    else
      return Assets[tile.ID].texture[1], Assets[tile.ID].texture[2], Assets[tile.ID].texture[3]
    end
  end
end

function Level.getLightingMap() return lightingMap end
function Level.setTime(newTime) if type(newTime) == "number" and newTime >= 0 and newTime <= 24 then currentTime = newTime end end
function Level.getTime() return newTime end
function Level.setWorld(world) if type(world) == "table" then currentWorld = world end end -- Sets the current map
function Level.getWorld() return currentWorld end -- Gets the current map
function Level.getSize() return currentWorld["size"][1], currentWorld["size"][2] end
function Level.setSpawnPoint(newSpawn) if type(newSpawn) == "table" then spawnPoint = newSpawn end end
function Level.getSpawnPoint() return spawnPoint end

function Level.updateArea(dimension, sx, sy, ex, ey)
  --local px, py = Player.getCoordinates("Jazz"); addLight(0, px, py, 10)

  currentWorld = mapLoop(currentWorld, dimension, function(x, y, area) 
    if not area["center"].Tile.ID then return end
    -- Covers dirt with grass 
    if dimension == 0 then
      if area["center"].Tile.ID == 55 and area["center"].Block.ID == false and (area["left"].Tile.ID == 50 or area["right"].Tile.ID == 50 or area["up"].Tile.ID == 50 or area["down"].Tile.ID == 50) then 
        if math.random(1000) == 1 then currentWorld[0][x][y].Tile.ID = 50 end
      end
    end

    -- Runs any scripts a block / tile may have.
    if Assets[area["center"].Block.ID] and Assets[area["center"].Block.ID].script then File.runScript(Assets[area["center"].Block.ID].script(dimension, x, y)) end
    if Assets[area["center"].Tile.ID] and Assets[area["center"].Tile.ID].script then File.runScript(Assets[area["center"].Tile.ID].script(dimension, x, y)) end

    -- Updates the lightingMap
    
    -- Lets liquids "flow" into hole tiles
    if Assets[area["center"].Tile.ID].type == "liquid" then 
      if area["left"].Tile.ID == 57 then currentWorld[0][x - 1][y] = {Tile = {ID = area["center"].Tile.ID, currentAnimation = math.random(#Assets[area["center"].Tile.ID].texture / 3), totalAnimation = #Assets[area["center"].Tile.ID].texture / 3}, Block = {ID = false}} end
      if area["right"].Tile.ID == 57 then currentWorld[0][x + 1][y] = {Tile = {ID = area["center"].Tile.ID, currentAnimation = math.random(#Assets[area["center"].Tile.ID].texture / 3), totalAnimation = #Assets[area["center"].Tile.ID].texture / 3}, Block = {ID = false}} end
      if area["up"].Tile.ID == 57 then currentWorld[0][x][y - 1] = {Tile = {ID = area["center"].Tile.ID, currentAnimation = math.random(#Assets[area["center"].Tile.ID].texture / 3), totalAnimation = #Assets[area["center"].Tile.ID].texture / 3}, Block = {ID = false}} end
      if area["down"].Tile.ID == 57 then currentWorld[0][x][y + 1] = {Tile = {ID = area["center"].Tile.ID, currentAnimation = math.random(#Assets[area["center"].Tile.ID].texture / 3), totalAnimation = #Assets[area["center"].Tile.ID].texture / 3}, Block = {ID = false}} end
    end
  end)
end

-- Returns true if the id exists 
function Level.convertID(ID) 
  if type(ID) ~= "number" and type(ID) ~= "string" then return end
  for i = 1, table.maxn(Assets) do
    if type(ID) == "number" and Assets[i] ~= nil and i == ID then return Assets[i].name end
    if type(ID) == "string" and Assets[i] ~= nil and Assets[i].name == ID then return i end
  end
end

-- Checks if the player stand here without intersecting any blocks / tiles.
function Level.checkForCollision(dim, x, y, banned)
  if type(dim) ~= "number" or type(x) ~= "number" or type(y) ~= "number" then return end
  local banned = banned or {}; banned[#banned + 1] = 64
  local Block = Assets[Level.getData(dim, x, y).Block.ID]
  for i = 1, #banned do if Level.getData(dim, x, y).Tile.ID == banned[i] then return true end end
  if Block and Block.type == "block" then return true end
end

-- Sets the ID of a tile and/or block at a specific point.
function Level.setData(dim, x, y, newData)
  if type(newData) ~= "table" then return end
  local currentBlock, currentTile
  if currentWorld[dim] and currentWorld[dim][x] and currentWorld[dim][x][y] then
    currentBlock, currentTile = currentWorld[dim][x][y].Block, currentWorld[dim][x][y].Tile
  else return end
  
  if newData.Block and newData.Block.ID then
    if type(newData.Block.ID) == "string" then newData.Block.ID = tonumber(newData.Block.ID) end
    if #Assets[newData.Block.ID].texture > 3 then
      newData.Block.currentAnimation = math.random(#Assets[newData.Block.ID].texture / 3)
      newData.Block.totalAnimation = #Assets[newData.Block.ID].texture / 3
    end
  end

  if newData.Tile and newData.Tile.ID then
    if type(newData.Tile.ID) == "string" then newData.Tile.ID = tonumber(newData.Tile.ID) end
    if #Assets[newData.Tile.ID].texture > 3 then
      newData.Tile.currentAnimation = math.random(#Assets[newData.Tile.ID].texture / 3)
      newData.Tile.totalAnimation = #Assets[newData.Tile.ID].texture / 3
    end
  end
  currentWorld[dim][x][y] = {Block = newData.Block or currentBlock, Tile = newData.Tile or currentTile}
end

-- Returns the data of a block and tile at a specific point
function Level.getData(dim, x, y)
  if type(dim) ~= "number" or type(x) ~= "number" or type(y) ~= "number" then return end
  return currentWorld[dim][x][y]
end

function Level.setOffset(x, y)
  if type(x) == "string" then
    if string.find(x, "add") then OffsetX = OffsetX + (tonumber(x:sub(4)) or 0) end
    if string.find(x, "sub") then OffsetX = OffsetX - (tonumber(x:sub(4)) or 0) end
  elseif type(x) == "number" then OffsetX = x end

  if type(y) == "string" then
    if string.find(y, "add") then OffsetY = OffsetY + (tonumber(y:sub(4)) or 0) end
    if string.find(y, "sub") then OffsetY = OffsetY - (tonumber(y:sub(4)) or 0) end
  elseif type(y) == "number" then OffsetY = y end
end

function Level.getOffset() return OffsetX, OffsetY end

-- Takes in 2 IDs for generation
-- Format: {asset = 10, chance = 10, asset = 20, chance = 90}
function Level.chance(blockTable, totalPercent)
  local randomNumber = math.random(totalPercent or 100)
  local asset = false

  local chanceTable = {}
  for i = 1, #blockTable / 2 do chanceTable[i] = blockTable[i * 2] end

  table.sort(chanceTable, function(a, b) return a > b end)
  for i = 1, #chanceTable do
    if randomNumber <= chanceTable[i] then
      asset = blockTable[i * 2 - 1]
    end
  end

  return asset
end

-- Generates the overworld
function Level.generateWorld(world)
  -- Generates the outerworld --------------------------------------------
  local world = mapLoop(world, 1, function(x, y, area) world[1][x][y].Tile.ID = 64 end) -- Places Infinite fall tiles
  local world = mapLoop(world, 1, function(x, y, area, world) -- Adds "clouds"
    if math.random(750) == 1 then world = mapBrush(world, 1, x, y, {Tile = 65}, math.random(2, 7)) end
  end)
  local world = mapLoop(world, 1, function(x, y, area) -- Adds cacti
    if area["left"].Tile.ID == 65 and area["right"].Tile.ID == 65 and area["up"].Tile.ID == 65 and area["down"].Tile.ID == 65 then 
      world[1][x][y].Block.ID = Level.chance({4, 95, false, 100})
    end
  end)

  -- Generates the overworld --------------------------------------------
  local world = mapLoop(world, 0, function(x, y, area) world[0][x][y].Tile.ID = Level.chance({55, 99, 50, 100}) end) -- Places Dirt / Grass
  local world = mapLoop(world, 0, function(x, y, area) world[0][x][y].Block.ID = Level.chance({1, 1}) end) -- Adds stone
  local world = mapLoop(world, 0, function(x, y, area, world) -- Adds sand
    if math.random(500) == 1 then world = mapBrush(world, 0, x, y, {Tile = 56}, math.random(2, 5)) end
  end)
  local world = mapLoop(world, 0, function(x, y, area) -- Adds water
    if ((area["left"].Tile.ID == 56 or area["left"].Tile.ID == 51) and (area["right"].Tile.ID == 56 or area["right"].Tile.ID == 51) and (area["up"].Tile.ID == 56 or area["up"].Tile.ID == 51) and (area["down"].Tile.ID == 56 or area["down"].Tile.ID == 51)) or ((area["upleft"].Tile.ID == 56 or area["upleft"].Tile.ID == 51) and (area["upright"].Tile.ID == 56 or area["upright"].Tile.ID == 51) and (area["downleft"].Tile.ID == 56 or area["downleft"].Tile.ID == 51) and (area["downright"].Tile.ID == 56 or area["downright"].Tile.ID == 51)) then 
      world[0][x][y].Tile = {ID = 51, currentAnimation = math.random(2), totalAnimation = 2}
    end
  end)
  local world = mapLoop(world, 0, function(x, y, area) -- Adds cacti
    if area["center"].Tile.ID == 56 then 
      world[0][x][y].Block.ID = Level.chance({4, 95, false, 100})
    end
  end)
  local world = mapLoop(world, 0, function(x, y, area) -- Adds flora
    if area["left"].Tile.ID == 50 and area["right"].Tile.ID == 50 and area["up"].Tile.ID == 50 and area["down"].Tile.ID == 50 then 
      world[0][x][y].Block.ID = Level.chance({math.random(26, 28), 95, false, 100})
    end
  end)
  local world = mapLoop(world, 0, function(x, y, area) -- Adds trees
    if area["center"].Tile.ID == 55 then 
      world[0][x][y].Block.ID = 2
      world[0][x][y - 1].Block.ID = 3
      world[0][x + 1][y - 1].Block.ID = 3
      world[0][x - 1][y - 1].Block.ID = 3
      world[0][x][y - 1].Block.ID =  3
      world[0][x][y - 2].Block.ID = 3
    end
  end)
  local world = mapLoop(world, 0, function(x, y, area, world) -- Adds more stone
    if math.random(2000) == 1 then world = mapBrush(world, 0, x, y, {Block = 1, Tile = 55}, math.random(3, 5)) end
  end)
  local world = mapLoop(world, 0, function(x, y, area) -- Adds Coal
    if area["left"].Block.ID == 1 and area["right"].Block.ID == 1 and area["up"].Block.ID == 1 and area["down"].Block.ID == 1 then 
      world[0][x][y].Block = {ID = Level.chance({8, 20}) or 1}
    end
  end)

  -- Generates Upper Caves ------------------------------------
  local world = mapLoop(world, -1, function(x, y, area) world[-1][x][y].Tile.ID = 55; world[-1][x][y].Block = {ID = 1} end) -- Puts Dirt and stone
  local world = mapLoop(world, -1, function(x, y, area) -- Adds Coal / Iron
    if area["left"].Block.ID == 1 or area["right"].Block.ID == 1 or area["up"].Block.ID == 1 or area["down"].Block.ID == 1 then 
      world[-1][x][y].Block = {ID = Level.chance({8, 85, 9, 91, 1, 100})}
    end
  end)
  local world = mapLoop(world, -1, function(x, y, area, world) -- Removes blocks for caves
    if math.random(400) == 1 then world = mapBrush(world, -1, x, y, {Block = false}, math.random(3, 6)) end
  end)

  -- Generates Midpoint ------------------------------------
  local world = mapLoop(world, -2, function(x, y, area) world[-2][x][y].Tile.ID = 67; world[-2][x][y].Block = {ID = 1} end) -- Puts Dirt and stone
  local world = mapLoop(world, -2, function(x, y, area) -- Adds Coal / Gold
    if area["left"].Block.ID == 1 or area["right"].Block.ID == 1 or area["up"].Block.ID == 1 or area["down"].Block.ID == 1 then 
      world[-2][x][y].Block = {ID = Level.chance({8, 75, 10, 80, 1, 100})}
    end
  end)
  local world = mapLoop(world, -2, function(x, y, area, world) -- Adds dirt
    if math.random(500) == 1 then world = mapBrush(world, -2, x, y, {Block = false}, math.random(3, 6)) end
  end)

  -- Generates Lower Caves ------------------------------------
  local world = mapLoop(world, -3, function(x, y, area) world[-3][x][y].Tile.ID = 67; world[-3][x][y].Block = {ID = 1} end) -- Puts Dirt and stone
  local world = mapLoop(world, -3, function(x, y, area) -- Adds Coal / Iron
    if area["left"].Block.ID == 1 or area["right"].Block.ID == 1 or area["up"].Block.ID == 1 or area["down"].Block.ID == 1 then 
      world[-3][x][y].Block = {ID = Level.chance({8, 65, 11, 70, 1, 100})}
    end
  end)
  local world = mapLoop(world, -3, function(x, y, area, world) -- Adds dirt
    if math.random(600) == 1 then world = mapBrush(world, -3, x, y, {Block = false}, math.random(3, 6)) end
  end)
   local world = mapLoop(world, -3, function(x, y, area, world) -- Adds stone tiles
    if math.random(500) == 1 then world = mapBrush(world, -3, x, y, {Tile = 66, Block = false}, math.random(2, 5)) end
  end)
  local world = mapLoop(world, -3, function(x, y, area) -- Adds lava
    if ((area["left"].Tile.ID == 66 or area["left"].Tile.ID == 61) and (area["right"].Tile.ID == 66 or area["right"].Tile.ID == 61) and (area["up"].Tile.ID == 66 or area["up"].Tile.ID == 61) and (area["down"].Tile.ID == 66 or area["down"].Tile.ID == 61)) or ((area["upleft"].Tile.ID == 66 or area["upleft"].Tile.ID == 61) and (area["upright"].Tile.ID == 66 or area["upright"].Tile.ID == 61) and (area["downleft"].Tile.ID == 66 or area["downleft"].Tile.ID == 61) and (area["downright"].Tile.ID == 66 or area["downright"].Tile.ID == 61)) then 
      world[-3][x][y] = {Tile = {ID = 61, currentAnimation = math.random(2), totalAnimation = 2}, Block = {ID = false}}
    end
  end)

  -- Adds in all the stair cases. These functions are so bad, heres when I start getting lazy ------------------------------------------
  local function placeStaircase(world, dim, x, y, tileid, blockid, tileid2, blockid2)
    local blockid = blockid or false
    local blockid2 = blockid2 or false

    world[dim][x][y] = {Block = {ID = false}, Tile = {ID = 62}}
    world[dim][x + 1][y] = {Block = {ID = blockid}, Tile = {ID = tileid}}
    world[dim][x - 1][y] = {Block = {ID = blockid}, Tile = {ID = tileid}}
    world[dim][x][y + 1] = {Block = {ID = blockid}, Tile = {ID = tileid}}
    world[dim][x][y - 1] = {Block = {ID = blockid}, Tile = {ID = tileid}}
    world[dim][x + 1][y + 1] = {Block = {ID = blockid}, Tile = {ID = tileid}}
    world[dim][x + 1][y - 1] = {Block = {ID = blockid}, Tile = {ID = tileid}}
    world[dim][x - 1][y + 1] = {Block = {ID = blockid}, Tile = {ID = tileid}}
    world[dim][x - 1][y - 1] = {Block = {ID = blockid}, Tile = {ID = tileid}}

    world[dim + 1][x][y] = {Block = {ID = false}, Tile = {ID = 63}}
    world[dim + 1][x + 1][y] = {Block = {ID = blockid2}, Tile = {ID = tileid2}}
    world[dim + 1][x - 1][y] = {Block = {ID = blockid2}, Tile = {ID = tileid2}}
    world[dim + 1][x][y + 1] = {Block = {ID = blockid2}, Tile = {ID = tileid2}}
    world[dim + 1][x][y - 1] = {Block = {ID = blockid2}, Tile = {ID = tileid2}}
    world[dim + 1][x + 1][y + 1] = {Block = {ID = blockid2}, Tile = {ID = tileid2}}
    world[dim + 1][x + 1][y - 1] = {Block = {ID = blockid2}, Tile = {ID = tileid2}}
    world[dim + 1][x - 1][y + 1] = {Block = {ID = blockid2}, Tile = {ID = tileid2}}
    world[dim + 1][x - 1][y - 1] = {Block = {ID = blockid2}, Tile = {ID = tileid2}}

    return world
  end

  local function randomStaircase(world, dim, id, id2, id3, id4)
    local randomX = math.random(world["size"][1])
    local randomY = math.random(world["size"][2])
    world = placeStaircase(world, dim, randomX, randomY, id, id2, id3, id4)
    return world
  end

  world = randomStaircase(world, 0, 55, 7, 65)
  world = randomStaircase(world, -1, 55, _, 55, 1)
  world = randomStaircase(world, -2, 67, _, 55, 1)
  world = randomStaircase(world, -3, 66, _, 67, 1)
  return world
end

function Level.worldBase(length, width, minDim, maxDim)
  local World = {}
  for dimension = minDim, maxDim do 
    World[dimension] = {}
    for x = 0, length + 1 do
      World[dimension][x] = {}
      for y = 0, width + 1 do
        World[dimension][x][y] = {Block = {ID = false}, Tile = {ID = false}} 
      end
    end
  end
  Level.setWorld(World)
end

-- Generates a new world.
function Level.newWorld(length, width)
  local World = {}

  for dimension = -3, 1 do 
    World[dimension] = {}
    for x = -100, length + 100 do
      World[dimension][x] = {}
      for y = -100, width + 100 do
        World[dimension][x][y] = {Block = {ID = false}, Tile = {ID = false}} 
      end
    end
  end

  World["size"] = {length, width}

  local World = Level.generateWorld(World) 
  Level.setWorld(World) 

  --[[
  local loadedMods = File.getLoadedMods()
  for i = 1, #loadedMods do 
    if loadedMods[i].Type == "generation" then
      func = loadedMods[i].Addon
      map = func(map, mx, mx2) yield()
    end
  end
  --]]
  
  return World
end
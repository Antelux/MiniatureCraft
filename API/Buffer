local nativeTerm = term.native(); local sx, sy = nativeTerm.getSize()
local setCursorBlink, setCursorPos, setBackgroundColor, setTextColor, nWrite = nativeTerm.setCursorBlink, nativeTerm.setCursorPos, nativeTerm.setBackgroundColor, nativeTerm.setTextColor, nativeTerm.write
local ty, rep, sub, floor, pow, abs = type, string.rep, string.sub, math.floor, math.pow, math.abs

-- Note to self: Check the performance of using term.blit() with three seperate tables.
_G.Buffer = {
    createBuffer = function(x, y, width, height, termIsColor)
        local termObject = {
            CursorX = 1, CursorY = 1,
            OffsetX = (x or 1) - 1, OffsetY = (y or 1) - 1,
            Width = width or sx, Height = height or sy,
            TColor = colors.white, BColor = colors.black,
            CursorBlink = false,
            TermIsColor = termIsColor or nativeTerm.isColor(),
            Screen = {}, isDirty = false
        }

        for y = 1, termObject.Height do 
            termObject.Screen[y] = {}
            for x = 1, termObject.Width do
                termObject.Screen[y][x] = {" ", termObject.TColor, termObject.BColor}
            end
        end

        termObject.isColor = function() return termObject.TermIsColor end
        termObject.write = function(tString)
            if ty(tString) ~= "string" then tString = ""..tString end
            local cx, cy, w, h = termObject.CursorX, termObject.CursorY, termObject.Width, termObject.Height
            if cx < 1 or cx > w or cy < 1 or cy > h then return end; 
            local Screen, tColor, bColor = termObject.Screen, termObject.TColor, termObject.BColor

            if tColor == 0 and bColor == 0 then
                for i = 1, #tString do
                    Screen[cy][cx][1] = sub(tString, i, i); cx = cx + 1
                    if cx > w then termObject.CursorX, termObject.isDirty = termObject.CursorX + #tString, true; return end
                end
            elseif tColor == 0 then
                for i = 1, #tString do
                    Screen[cy][cx][1] = sub(tString, i, i)
                    Screen[cy][cx][3] = bColor; cx = cx + 1
                    if cx > w then termObject.CursorX, termObject.isDirty = termObject.CursorX + #tString, true; return end
                end
            elseif bColor == 0 then
                for i = 1, #tString do
                    Screen[cy][cx][1] = sub(tString, i, i)
                    Screen[cy][cx][2] = tColor; cx = cx + 1
                    if cx > w then termObject.CursorX, termObject.isDirty = termObject.CursorX + #tString, true; return end
                end
            else
                for i = 1, #tString do
                    Screen[cy][cx][1] = sub(tString, i, i)
                    Screen[cy][cx][2] = tColor 
                    Screen[cy][cx][3] = bColor
                    cx = cx + 1
                    if cx > w then termObject.CursorX, termObject.isDirty = termObject.CursorX + #tString, true; return end
                end
            end
            termObject.CursorX, termObject.isDirty = cx, true
        end
         
        termObject.setCursorPos = function(x, y) termObject.CursorX, termObject.CursorY = floor(x), floor(y) end
        termObject.getCursorPos = function() return termObject.CursorX, termObject.CursorY end
        termObject.scroll = function(scrollAmount) end
         
        termObject.clear = function()
            local Screen, w, h = termObject.Screen, termObject.Width, termObject.Height
            local s, tc, bc = " ", termObject.TColor, termObject.BColor
            for y = 1, h do 
                for x = 1, w do 
                    Screen[y][x][1] = s
                    Screen[y][x][2] = tc 
                    Screen[y][x][3] = bc 
                end 
            end
            termObject.isDirty = true
        end
        
        termObject.clearLine = function() end
        termObject.setCursorBlink = function(cBool) termObject.CursorBlink = cBool end
        termObject.getSize = function() return termObject.Width, termObject.Height end
        termObject.setTextColor = function(color) termObject.TColor = color end
        termObject.setBackgroundColor = function(color) termObject.BColor = color end

        termObject.blit = function(text, tcolor, bcolor)
            local cx, cy, w, h = termObject.CursorX, termObject.CursorY, termObject.Width, termObject.Height
            if cx < 1 or cx > w or cy < 1 or cy > h then return end
            local Screen = termObject.Screen
            for i = 1, #tString do
                Screen[cy][cx][1] = sub(text, i, i)
                Screen[cy][cx][2] = sub(tcolor, i, i)
                Screen[cy][cx][3] = sub(bcolor, i, i) 
                cx = cx + 1
            end
            termObject.CursorX, termObject.isDirty = cx, true
        end
        
        termObject.drawScreen = function()
            if not termObject.isDirty then return end
            local tColor, bColor = termObject.TColor, termObject.BColor
            local w, h = termObject.Width, termObject.Height
            local ox, oy = termObject.OffsetX + 1, termObject.OffsetY
            local Screen = termObject.Screen
            local cursorBlink = termObject.CursorBlink

            if cursorBlink then setCursorBlink(false) end; termObject.isDirty = false

            for y = 1, h do
                setCursorPos(ox, y + oy) 
                for x = 1, w do
                    local bc, tc, ts = Screen[y][x][3], Screen[y][x][2], Screen[y][x][1]
                    if bc ~= bColor then setBackgroundColor(bc); bColor = bc end
                    if tc ~= tColor then setTextColor(tc); tColor = tc end; nWrite(ts) 
                end
            end

            if termObject.BColor ~= 0 then setBackgroundColor(termObject.BColor) end; if termObject.TColor ~= 0 then setTextColor(termObject.TColor) end
            if cursorBlink then setCursorPos(termObject.CursorX, termObject.CursorY); setCursorBlink(true) end
        end

        termObject.setBackgroundColour = termObject.setBackgroundColor
        termObject.setTextColour = termObject.setTextColor
        termObject.isColour = termObject.isColor

        return termObject
    end
}
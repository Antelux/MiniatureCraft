local MainFolder = shell.getRunningProgram():sub(1, #shell.getRunningProgram() - #fs.getName(shell.getRunningProgram()))
local loadedMods, interactionBlocks, serverList = {}, {}, {}
local Assets = File.getAssets()
local parentMod 
local levelName = ""
local ScreenWidth, ScreenHeight = Screen.getSize()

local optionData = {
  playerName = "Player",
  playerColor = colors.red --,
  -- useAnimations = true,
}

local fileDirectory = {"/API", "/Mods", "/Saves", "/Config"}
for i = 1, #fileDirectory do if not fs.exists(MainFolder.. "" ..fileDirectory[i]) then fs.makeDir(MainFolder.. "" ..fileDirectory[i]) end end

local function reloadOptions(wipe)
  if not fs.exists(MainFolder.. "/options.data") or wipe then local options = fs.open(MainFolder.. "/options.data", "w"); options.write(textutils.serialize(optionData)); options.close()
  else local options = fs.open(MainFolder.. "/options.data", "r"); optionData = textutils.unserialize(options.readAll()); options.close() end
end
reloadOptions()

function File.setCurrentPlayer(newPlayerName) optionData.playerName = newPlayerName; reloadOptions(true) end
function File.getCurrentPlayer() return optionData.playerName end
function File.setCurrentColor(newColor) optionData.playerColor = newColor; reloadOptions(true) end
function File.getCurrentColor() return optionData.playerColor end
function File.getCurrentWorldName() return levelName end

-- Merges two tables together, used for putting mod assets with the main ones.
local function mergeTables(addon, original)
  for k, v in pairs(addon) do original[k] = v end; return original
end

-- Run mod scripts in a sandboxed environment
function File.runScript(script)
  local loadedScript
  if type(script) == "string" then loadedScript = function() dofile(script) end elseif type(script) ~= "function" then return end

  local blockedFunctions = {fs = nil, shell = nil, window = nil, peripheral = nil, multishell = nil} --, Level.worldBase = nil}
  local environment = mergeTables(blockedFunctions, _G)
        
  setfenv(loadedScript, environment)
  local ok, error = pcall(function() loadedScript() end)
  if not ok and err and err ~= "" then
    local errorLog = fs.open(MainFolder.. "/log", "w")
    errorLog.write(os.day().. ":" ..textutils.serialize(os.time()).. ":" ..err)
  end
end

-- Returns the main directory of MiniatureCraft.
function File.getMainDirectory() return MainFolder end

function File.loadMods()
  local foundMods = fs.list(MainFolder.. "/Mods/")
  for _, file in ipairs(foundMods) do
    parentMod = file
    File.runScript(MainFolder.. "/Mods/" ..file) 
  end
end

-- Loads the games assets, and mods aswell.
function File.loadAssets()
  for i = 1, #loadedMods do -- Merges the mod assets with the games ones.
    if loadedMods[i].Assets then Assets = mergeTables(loadedMods[i].Assets, Assets) end
  end
  return Assets
end

-- Returns the currently loaded mods.
function File.getLoadedMods() return loadedMods end

-- Adds a mod to the game. Requires a table of information.
function File.addMod(modTable) 
  loadedMods[#loadedMods + 1] = {
    ParentMod = parentMod or "Unknown",
    Name = modTable.name or modTable[1] or "Unknown",
    Author = modTable.author or modTable[2] or "Unknown",
    Info = modTable.info or modTable[3] or "This mod lacks a description! ):", 
    Assets = modTable.assets or modTable[4] or false,
    Generation = modTable.generation or modTable[5] or false
  }
end
 
-- Save and load the storage table
function File.saveWorld(worldName)
  if type(worldName) ~= "string" then return end
  local SavePath, currentWorld = File.getMainDirectory().. "/Saves/" ..worldName, Level.getWorld()
  local worldData = {["Size"] = currentWorld["size"], ["Spawn"] = Level.getSpawnPoint(), ["Time"] = Level.getTime()} or {}
  fs.delete(SavePath.. "/Dimension"); fs.delete(SavePath.. "/players.data"); fs.makeDir(SavePath.. "/Dimension")
  local Players = fs.open(SavePath.. "/players.data", "w"); Players.write(textutils.serialize(Player.getPlayers() or {})); Players.close()
  local Entities = fs.open(SavePath.. "/entities.data", "w"); Entities.write(textutils.serialize(Entity.getEntities() or {})); Entities.close()
  local WorldData = fs.open(SavePath.. "/world.data", "w"); WorldData.write(textutils.serialize(worldData)); WorldData.close()
  local StorageTable = {}
  for dimension in pairs(currentWorld) do
    if dimension ~= "size" then
      local World = fs.open(SavePath.. "/Dimension/" ..dimension, "wb") 
      for y = 1, currentWorld["size"][2] do
        for x = 1, currentWorld["size"][1] do
          if currentWorld[dimension][x][y].Tile.ID <= 255 then World.write(currentWorld[dimension][x][y].Tile.ID or 0) end
          if not currentWorld[dimension][x][y].Block.ID or currentWorld[dimension][x][y].Block.ID <= 255 then World.write(currentWorld[dimension][x][y].Block.ID or 0) end
          if currentWorld[dimension][x][y].Tile.storage and currentWorld[dimension][x][y].Tile.storage ~= {} then StorageTable[#StorageTable + 1] = {I = currentWorld[dimension][x][y].Tile.ID, D = dimension, X = x, Y = y, T = "T", S = currentWorld[dimension][x][y].Tile.storage} end
          if currentWorld[dimension][x][y].Block.storage and currentWorld[dimension][x][y].Block.storage ~= {} then StorageTable[#StorageTable + 1] = {I = currentWorld[dimension][x][y].Block.ID, D = dimension, X = x, Y = y, T = "B", S = currentWorld[dimension][x][y].Block.storage} end
        end
        os.queueEvent("yield"); os.pullEvent("yield")
      end
      World.close()
    end
  end
  local Storage = fs.open(SavePath.. "/storage.data", "w"); Storage.write(textutils.serialize(StorageTable)); Storage.close()
end

local function splitWorldString(str)
  local result = {}
  for output in string.gmatch(str, "([^|]+)") do 
    local sx, ex = string.find(output, ":")
    local block, tile = false, tonumber(output)
    if sx then block = string.sub(output, ex + 1); tile = string.sub(output, 1, ex - 1) end
    result[#result + 1] = {Block = block, Tile = tile}
  end
  return result
end

function File.loadWorld(worldName)
  if type(worldName) ~= "string" then return end
  local SavePath, Length, Width = File.getMainDirectory().. "/Saves/" ..worldName
  if not fs.exists(SavePath) then return end
  local Players = fs.open(SavePath.. "/players.data", "r"); Player.setPlayers(textutils.unserialize(Players.readAll())); Players.close()
  local Entities = fs.open(SavePath.. "/entities.data", "r"); Entity.setEntities(textutils.unserialize(Entities.readAll())); Entities.close()
  local WorldData = fs.open(SavePath.. "/world.data", "r"); local Data = textutils.unserialize(WorldData.readAll()) WorldData.close()
  local Storage = fs.open(SavePath.. "/storage.data", "r"); local StorageTable = textutils.unserialize(Storage.readAll()) Storage.close()
  local Length, Width = Data["Size"][1], Data["Size"][2]; Level.setSpawnPoint(Data["Spawn"]); Level.setTime(Data["Time"]) 
  local Dimensions = fs.list(SavePath.. "/Dimension/"); table.sort(Dimensions, function(a, b) return a > b end)
  Level.worldBase(Length, Width, Dimensions[3], Dimensions[1])
  for _, dimension in ipairs(Dimensions) do
    local World = fs.open(SavePath.. "/Dimension/" ..dimension, "rb")
    for y = 1, Length do
      for x = 1, Width do
        local tile = World.read(); local block = World.read()
        if tile and tile ~= 0 then Level.setData(tonumber(dimension), x, y, {Tile = {ID = tile}}) end
        if block and block ~= 0 then Level.setData(tonumber(dimension), x, y, {Block = {ID = block}}) end
      end
    end
    World.close()
    os.queueEvent("yield"); os.pullEvent("yield")
  end
  for i = 1, #StorageTable do
    if StorageTable[i].T == "T" then Level.setData(StorageTable[i].D, StorageTable[i].X, StorageTable[i].Y, {Tile = {ID = StorageTable[i].I, storage = StorageTable[i].S}}) end
    if StorageTable[i].T == "B" then Level.setData(StorageTable[i].D, StorageTable[i].X, StorageTable[i].Y, {Block = {ID = StorageTable[i].I, storage = StorageTable[i].S}}) end
  end
  local newWorld = Level.getWorld()
  newWorld["size"] = {Length, Width}
  Level.setWorld(newWorld); levelName = worldName
  if Level.isSingleplayer() then
    Player.setName(Player.getNames()[1], optionData.playerName)
    Player.setColor(optionData.playerName, optionData.playerColor)
    local px, py = Player.getCoordinates(optionData.playerName)
    Level.setOffset(px - math.ceil(ScreenWidth / 2), py - math.ceil(ScreenHeight / 2))
  end
end

local blockedFiles = {"mc", "Assets", "Mods", "API"}
local function checkFile(filename)
  local result = {}
  for output in string.gmatch(filename, "([^/]+)") do result[#result + 1] = output end
  for i = 1, #blockedFiles do if result[1] == blockedFiles[i] then return true end end
end

--[ Replace with just modifying fs and io
function File.writeToFile(filename, fileTable) 
  if type(filename) ~= "string" or type(fileTable) ~= "table" then return end
  local filename = MainFolder.. "/" ..filename
  if not fs.exists(filename) then return end
  if checkFile(filename) then return end
  local file = fs.open(filename, "w")
  for i = 1, #fileTable do
    file.writeLine(fileTable[i])
  end
  file.close()
end

function File.readFromFile(filename) 
  if type(filename) ~= "string" then return end
  local filename = MainFolder.. "/" ..filename
  if not fs.exists(filename) then return end
  if checkFile(filename) then return end
  local lineTable = {}
  local file = fs.open(filename, "r")
  local Line = file.readLine()
  while Line do
    lineTable[#lineTable + 1] = Line
    Line = file.readLine()
  end
  file.close()
  return lineTable
end

function File.exists(filename)
  if type(filename) ~= "string" then return end
  local filename = MainFolder.. "/" ..filename
  if fs.exists(filename) then return true end
end
--]

function File.getServerList()
  if fs.exists(MainFolder.. "/servers.dat") then
    local file = fs.open(MainFolder.. "/servers.dat", "r")
    local serverList = textutils.unserialize(file.readAll())
    file.close()
    return serverList
  else return {} end
end

function File.setServerList(serverList)
  if type(serverList) ~= "table" then return end
  local file = fs.open(MainFolder.. "/servers.dat", "w")
  file.write(textutils.unserialize(file.readAll()))
  file.close()
end
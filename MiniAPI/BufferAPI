local nativeTerm = term.current()
local sx, sy = nativeTerm.getSize()

function createBuffer(x, y, width, height, termIsColor)
    local offsetX = x or 1
    local offsetY = y or 1
    local width = width or sx
    local height = height or sy
    local termIsColor = termIsColor or nativeTerm.isColor()

    local termObject = {
        CursorX = 1, CursorY = 1,
        OffsetX = offsetX, OffsetY = offsetY,
        Width = width, Height = height,
        TColor = colors.white, BColor = colors.black,
        CursorBlink = false,
        Active = true,
        TermIsColor = termIsColor,
        screen = {}
    }
    
    local terminalFunctions = {
        isColor = function(termObject)
            return termObject.TermIsColor
        end,

        isColour = function(termObject)
            return termObject.TermIsColor
        end,

        write = function(termObject, ...)
            local tString = table.concat({...}, " ")
            local cX = termObject.CursorX
            local cY = termObject.CursorY

            for i = 1, #tString do
                if cX >= 1 and cX <= termObject.Width and cY >= 1 and cY <= termObject.Height then
                    local char = string.char(tString:byte(i))

                    termObject.screen[cY] = termObject.screen[cY] or {}
                    termObject.screen[cY][cX] = termObject.screen[cY][cX] or {}

                    termObject.screen[cY][cX].Char = char
                    termObject.screen[cY][cX].TColor = termObject.TColor
                    termObject.screen[cY][cX].BColor = termObject.BColor
                else
                    break
                end
                cX = cX + 1
            end
            termObject.CursorX = cX
        end,
         
        setCursorPos = function(termObject, x, y)
            termObject.CursorX = math.floor(x)
            termObject.CursorY = math.floor(y)
        end,
         
        getCursorPos = function(termObject)
            return termObject.CursorX, termObject.CursorY
        end,

        scroll = function(termObject, n)
            if n ~= 0 then
                for i = 0, termObject.Height do
                    local y = i + n
                    if y >= 1 and y <= termObject.Height then
                        termObject.screen[i] = termObject.screen[y]
                    else
                        termObject.screen[i] = {}
                    end
                end
            end
        end,
         
        clear = function(termObject)
            for i = 1, termObject.Height do
                for j = 1, termObject.Width do
                    termObject.screen[i] = termObject.screen[i] or {}
                    termObject.screen[i][j] = termObject.screen[i][j] or {}

                    termObject.screen[i][j].Char = " "
                    termObject.screen[i][j].TColor = termObject.TColor
                    termObject.screen[i][j].BColor = termObject.BColor
                end
            end
        end,
         
        clearLine = function(termObject)
            if termObject.CursorY >= 1 and termObject.CursorY <= termObject.Height then
                termObject.screen[termObject.CursorY] = {}
            end
        end,

        setCursorBlink = function(termObject, cBool)
            if type(cBool) == "boolean" then
                termObject.CursorBlink = cBool
            end
        end,
         
        getSize = function(termObject)
            return termObject.Width, termObject.Height
        end,
         
        setTextColor = function(termObject, color)
            if termObject.TermIsColor then
                if color >= 1 and color <= 32768 then
                    termObject.TColor = color
                else
                    printError("Colour out of range")
                end
            else
                if color == 1 or color == 32768 then
                    termObject.TColor = color
                else
                    printError("Colour not supported")
                end
            end
        end,

        setTextColour = function(termObject, color)
            if termObject.TermIsColor then
                if color >= 1 and color <= 32768 then
                    termObject.TColor = color
                else
                    printError("Colour out of range")
                end
            else
                if color == 1 or color == 32768 then
                    termObject.TColor = color
                else
                    printError("Colour not supported")
                end
            end
        end,

        getTextColor = function(termObject)
            return termObject.TColor 
        end,
         
        setBackgroundColor = function(termObject, color)
            if termObject.TermIsColor then
                if color >= 1 and color <= 32768 then -- Should make transparant have a option of 0
                    termObject.BColor = color
                else
                    printError("Colour out of range")
                end
            else
                if color == 1 or color == 32768 then
                    termObject.BColor = color
                else
                    printError("Colour not supported")
                end
            end
        end,

        setBackgroundColour = function(termObject, color)
            if termObject.TermIsColor then
                if color >= 1 and color <= 32768 then
                    termObject.BColor = color
                else
                    printError("Colour out of range")
                end
            else
                if color == 1 or color == 32768 then
                    termObject.BColor = color
                else
                    printError("Colour not supported")
                end
            end
        end,

        getBackgroundColor = function(termObject)
            return termObject.BColor 
        end,

        drawScreen = function(termObject, x, y, w, h)
            if termObject.Active then
                local x = x or termObject.OffsetX
                local y = y or termObject.OffsetY
                local w = w or termObject.Width
                local h = h or termObject.Height

                if x ~= termObject.OffsetX or y ~= termObject.OffsetY or w ~= termObject.Width or h ~= termObject.Height then
                    termObject.OffsetX = x 
                    termObject.OffsetY = y 
                    termObject.Width = w 
                    termObject.Height = h 
                    os.queueEvent("term_resize")
                end

                local colorList = {}

                local checkColor = function(x, y, col)
                    local newColor = true
                    for i = 1, #colorList do
                        if colorList[i].Color == col then
                            local n = #colorList[i].Points + 1
                            colorList[i].Points[n] = {}
                            colorList[i].Points[n].X = x
                            colorList[i].Points[n].Y = y
                            newColor = false
                            break
                        end
                    end

                    if newColor then
                        local n = #colorList + 1
                        colorList[n] = {}
                        colorList[n].Color = col
                        colorList[n].Points = {}
                        colorList[n].Points[1] = {}
                        colorList[n].Points[1].X = x
                        colorList[n].Points[1].Y = y
                    end
                end

                -- Organize colors so they only need to be set once when switched to
                for i = 1, termObject.Height do
                    for j = 1, termObject.Width do
                        if termObject.screen[i] then
                            if termObject.screen[i][j] then
                                if termObject.screen[i][j].BColor then
                                    checkColor(j, i, termObject.screen[i][j].BColor)
                                end
                            end
                        end
                    end
                end

                local currentTColor = termObject.TColor
                for i = 1, #colorList do
                    nativeTerm.setBackgroundColor(colorList[i].Color)
                    for j = 1, #colorList[i].Points do
                        local colX, colY = colorList[i].Points[j].X, colorList[i].Points[j].Y
                        nativeTerm.setCursorPos(colX + (termObject.OffsetX - 1), colY + (termObject.OffsetY - 1))
                        if termObject.screen[colY][colX].TColor ~= currentTColor then
                            currentTColor = termObject.screen[colY][colX].TColor
                            nativeTerm.setTextColor(currentTColor)
                        end
                        nativeTerm.write(termObject.screen[colY][colX].Char)
                    end
                end
            end
        end,

        getPosition = function()
            return termObject.OffsetX, termObject.OffsetY, termObject.Width, termObject.Height
        end
    }

    local sx, sy = nativeTerm.getSize()
    for i = 1, termObject.Height do
        termObject.screen[i] = {}
        for j = 1, termObject.Width do
            termObject.screen[i][j] = {}
            termObject.screen[i][j].Char = " "
            termObject.screen[i][j].TColor = colors.white
            termObject.screen[i][j].BColor = colors.black
        end
    end

    local function wrapTable(f, o)
        return function(...)
            return f(o, ...)
        end
    end
   
    for k, v in pairs(terminalFunctions) do
        if type(v) == "function" then
            terminalFunctions[k] = wrapTable(v, termObject)
        else
            terminalFunctions[k] = v
        end
    end
    setmetatable(termObject, {__index = terminalFunctions})

    return termObject
end
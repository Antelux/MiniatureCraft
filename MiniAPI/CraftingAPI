local Assets = LoadAPI.getAssets()
local craftingTables = {}
local selected = 1

function setCraftingTable(id, name, x, y, w, h)
  local newNumber = #craftingTables + 1
  craftingTables[newNumber] = {}
  craftingTables[newNumber].Name = name
  craftingTables[newNumber].ID = id
  craftingTables[newNumber].Recipes = {}
  craftingTables[newNumber].X = x
  craftingTables[newNumber].Y = y
  craftingTables[newNumber].W = w
  craftingTables[newNumber].H = h
end

function getCraftingTables()
  return craftingTables
end

function checkCraftingTables(id)
  local cTbl = getCraftingTables()
  for i = 1, #cTbl do
    if cTbl[i].ID == id then
      return true, i
    end
  end
end

function setRecipe(name, output, outputAmount, input)
  local craftingTables = getCraftingTables()
  local craftingID = false
  for i = 1, #craftingTables do
    if craftingTables[i].ID == name then
      craftingID = i
      break
    end
  end
  if craftingID then
    local newNumber = #craftingTables[craftingID].Recipes + 1
    craftingTables[craftingID].Recipes[newNumber] = {}
    craftingTables[craftingID].Recipes[newNumber].Input = {}
    craftingTables[craftingID].Recipes[newNumber].Output = output
    craftingTables[craftingID].Recipes[newNumber].OutputAmount = outputAmount
    craftingTables[craftingID].Recipes[newNumber].Input = input
  end
end

--[Crafting Table]-- (Disabled recipes are items / blocks that cannot be used at the moment.)
setCraftingTable(13, "CRAFTING", 2, 5, 18, 14)

-- Tools
setRecipe(13, 100, 1, {200, 2, 226, 1}) -- Wooden Sword
setRecipe(13, 101, 1, {200, 3, 226, 2}) -- Wooden Pickaxe
setRecipe(13, 102, 1, {200, 3, 226, 2}) -- Wodden Axe
setRecipe(13, 103, 1, {200, 1, 226, 2}) -- Wooden Shovel
setRecipe(13, 104, 1, {200, 2, 226, 2}) -- Wooden Hoe

setRecipe(13, 105, 1, {201, 2, 226, 1}) -- Rock Sword
setRecipe(13, 106, 1, {201, 3, 226, 2}) -- Rock Pickaxe
setRecipe(13, 107, 1, {201, 3, 226, 2}) -- Rock Axe
setRecipe(13, 108, 1, {201, 1, 226, 2}) -- Rock Shovel
setRecipe(13, 109, 1, {201, 2, 226, 2}) -- Rock Hoe

-- setRecipe(13, 151, 1, {226, 3, 242, 3}) -- Bow

--[[ Armor
setRecipe(13, 300, 1, {221, 5}) -- Cloth Helmet
setRecipe(13, 301, 1, {221, 8}) -- Cloth Chestplate
setRecipe(13, 302, 1, {221, 7}) -- Cloth Leggings
setRecipe(13, 303, 1, {221, 4}) -- Cloth Boots
--]]

-- Blocks
setRecipe(13, 223, 1, {200, 4}) -- Crafting Table
setRecipe(13, 224, 1, {201, 8}) -- Furnace
-- setRecipe(13, 228, 1, {201, 8}) -- Oven
setRecipe(13, 227, 1, {238, 3, 216, 4}) -- Anvil

setRecipe(13, 237, 1, {213, 9}) -- Coal Block
setRecipe(13, 238, 1, {216, 9}) -- Iron Block
setRecipe(13, 239, 1, {217, 9}) -- Gold Block
-- setRecipe(13, 240, 1, {218, 9}) -- Gem Block
-- setRecipe(13, 236, 1, {235, 9}) -- Redstone Block

-- Items
setRecipe(13, 226, 4, {200, 2}) -- Sticks
setRecipe(13, 241, 16, {216, 4}) -- Chains
-- setRecipe(13, 242, 4, {221, 1}) -- String

--[Furnace]--
setCraftingTable(14, "FURNACE", 2, 5, 18, 14)
setRecipe(14, 216, 1, {214, 1, 213, 1}) -- Iron
setRecipe(14, 217, 1, {215, 1, 213, 1}) -- Gold
setRecipe(14, 220, 1, {205, 1, 213, 1})-- Glass

--[Anvil]--
setCraftingTable(19, "ANVIl", 2, 5, 18, 14)

-- Tools
setRecipe(19, 110, 1, {216, 2, 226, 1}) -- Iron Sword
setRecipe(19, 111, 1, {216, 3, 226, 2}) -- Iron Pickaxe
setRecipe(19, 112, 1, {216, 3, 226, 2}) -- Iron Axe
setRecipe(19, 113, 1, {216, 1, 226, 2}) -- Iron Shovel
setRecipe(19, 114, 1, {216, 2, 226, 2}) -- Iron Hoe

setRecipe(19, 115, 1, {217, 2, 226, 1}) -- Gold Sword
setRecipe(19, 116, 1, {217, 3, 226, 2}) -- Gold Pickaxe
setRecipe(19, 117, 1, {217, 3, 226, 2}) -- Gold Axe
setRecipe(19, 118, 1, {217, 1, 226, 2}) -- Gold Shovel
setRecipe(19, 119, 1, {217, 2, 226, 2}) -- Gold Hoe

--[[
setRecipe(19, 120, 1, {218, 2, 226, 1}) -- Gem Sword
setRecipe(19, 121, 1, {218, 3, 226, 2}) -- Gem Pickaxe
setRecipe(19, 122, 1, {218, 3, 226, 2}) -- Gem Axe
setRecipe(19, 123, 1, {218, 1, 226, 2}) -- Gem Shovel
setRecipe(19, 124, 1, {218, 2, 226, 2}) -- Gem Hoe
--]]

-- Armors
setRecipe(19, 304, 1, {241, 5}) -- Chainmail Helmet
setRecipe(19, 305, 1, {241, 8}) -- Chainmail Chestplate
setRecipe(19, 306, 1, {241, 7}) -- Chainmail Leggings
setRecipe(19, 307, 1, {241, 4}) -- Chainmail Boots

setRecipe(19, 308, 1, {216, 5}) -- Iron Helmet
setRecipe(19, 309, 1, {216, 8}) -- Iron Chestplate
setRecipe(19, 310, 1, {216, 7}) -- Iron Leggings
setRecipe(19, 311, 1, {216, 4}) -- Iron Boots

setRecipe(19, 312, 1, {215, 5}) -- Gold Helmet
setRecipe(19, 313, 1, {215, 8}) -- Gold Chestplate
setRecipe(19, 314, 1, {215, 7}) -- Gold Leggings
setRecipe(19, 315, 1, {215, 4}) -- Gold Boots

--[[
setRecipe(19, 316, 1, {218, 5}) -- Gem Helmet
setRecipe(19, 317, 1, {218, 8}) -- Gem Chestplate
setRecipe(19, 318, 1, {218, 7}) -- Gem Leggings
setRecipe(19, 319, 1, {218, 4}) -- Gem Boots
--]]

--[[ Oven ]--
setCraftingTable(20, "OVEN", 2, 5, 18, 14)
setRecipe(20, 209, 1, {208, 3, 213, 1}) -- Bread
setRecipe(20, 212, 1, {211, 1, 213, 1}) -- Cooked Beef
setRecipe(20, 234, 1, {233, 1, 213, 1}) -- Cooked Pork
setRecipe(20, 232, 1, {231, 1, 213, 1}) -- Baked Carrot
setRecipe(20, 230, 1, {229, 1, 213, 1}) -- Baked Potato
--]]

function openCraftingMenu(id, inv, e, p1, p2, p3)
  local cTbl = getCraftingTables()
  local bool, cn = checkCraftingTables(id)
  local x, y, w, h = cTbl[cn].X, cTbl[cn].Y, cTbl[cn].W, cTbl[cn].H
  MenuAPI.createMenu(x, y, w, h, cTbl[cn].Name)
  MenuAPI.createMenu(w + 3, y, w, (h / 2) - 4, "HAVE")
  MenuAPI.createMenu(w + 3, (y + h / 2) - 3, w, (h / 2) + 3, "REQUIRED")

  if e == "key" then 
    if p1 == 17 or p1 == 200 then -- Up Key
      selected = selected - 1
      if selected < 1 then
        selected = #craftingTables[cn].Recipes
      end    

    elseif p1 == 31 or p1 == 208 then -- Down Key
      selected = selected + 1
      if selected > #craftingTables[cn].Recipes then
        selected = 1
      end

    elseif p1 == 16 or p1 == 18 then -- Q, E
      InventoryAPI.updateInventory(inv)
      selected = 1
      return false

    elseif p1 == 28 then -- Enter
      local hasEnough = 0
      if PlayerAPI.getPlayerMode() == 0 then
        for i = 1, #cTbl[cn].Recipes[selected].Input do
          if not (i % 2 == 0) then
            if InventoryAPI.checkInventory(inv, cTbl[cn].Recipes[selected].Input[i]) then
              hasEnough = hasEnough + 1
            end
          end
        end

        if hasEnough == (#cTbl[cn].Recipes[selected].Input / 2) then
          for i = 1, #cTbl[cn].Recipes[selected].Input do
            local giveID 
            local giveAmount
            if not (i % 2 == 0) then
              giveID = cTbl[cn].Recipes[selected].Input[i]
              giveAmount = cTbl[cn].Recipes[selected].Input[i + 1]
            end
            if giveID and giveAmount then
              InventoryAPI.removeItem(inv, giveID, giveAmount)
            end
          end
          InventoryAPI.addItem(inv, cTbl[cn].Recipes[selected].Output, cTbl[cn].Recipes[selected].OutputAmount)
        end
      elseif PlayerAPI.getPlayerMode() == 1 then
        InventoryAPI.addItem(inv, cTbl[cn].Recipes[selected].Output, cTbl[cn].Recipes[selected].OutputAmount)
      end
    end
  end

  local cSDone = false
  for i = 1, h - 2 do 
    cS = (i - 1) + selected
    if not cSDone then
      cS2 = cS
      cSDone = true
    end
    if cTbl[cn].Recipes[cS] ~= nil then

      term.setCursorPos(x + 1, y + i)
      term.setTextColor(colors.lightGray)
      local newStr = LevelAPI.checkID(cTbl[cn].Recipes[cS].Output)

      if newStr then
        if cS2 == cS then
          print("[" ..MenuAPI.formatString(newStr, w - 4).. "]")
          returnID, n = true, cS
        else
          print(MenuAPI.formatString(newStr, w - 4))
        end

        if cTbl[cn].Recipes[selected].Input then
          for i = 1, #cTbl[cn].Recipes[selected].Input do
            if not (i % 2 == 0) then

              if PlayerAPI.getPlayerMode() ~= 1 then
                if InventoryAPI.checkInventory(inv, cTbl[cn].Recipes[selected].Input[i]) then
                  term.setTextColor(colors.lightGray)
                else
                  term.setTextColor(colors.gray)
                end
              end

              local newInput = LevelAPI.checkID(cTbl[cn].Recipes[selected].Input[i])
              term.setCursorPos(w + 4, ((h / 2) + 2) + math.ceil(i/2))
              term.write(MenuAPI.formatString(newInput, w - 4))

            else
              if cTbl[cn].Recipes[selected].Input[i] ~= nil then
                term.setCursorPos(w * 2, ((h / 2) + 2) + math.ceil(i/2))
                term.write("x" ..cTbl[cn].Recipes[selected].Input[i])
              end
            end
          end
        end
      end
    end
  end

  local bool, amountHave, invNum = InventoryAPI.checkInventory(inv, cTbl[cn].Recipes[selected].Output)
  if amountHave and invNum then
    term.setCursorPos(w + 4, y + 1)
    term.setTextColor(colors.lightGray)
    term.write(LevelAPI.checkID(cTbl[cn].Recipes[selected].Output))
    term.setCursorPos(w * 2 - 1, y + 1)
    term.write("x" ..inv[invNum].Amount)
  else
    term.setCursorPos(w + 4, y + 1)
    term.setTextColor(colors.gray)
    term.write(LevelAPI.checkID(cTbl[cn].Recipes[selected].Output))
    term.setCursorPos(w * 2 - 1, y + 1)
    term.write("x0")
  end
  term.drawScreen()

  if ID ~= nil then
    return true, ID
  else
    return true
  end
end
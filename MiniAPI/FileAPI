-- Directorys
local MainFolder 
local fileDirectory = {}
local serverList = {}
local playerData = {
  playerName = "Player",
  playerColor = colors.red,
  graphicsType = "Fancy",
  useAnimations = true,
  useBuffer = true,
  doLighting = false -- HEAVILY RECOMMENDED THIS IS KEPT OFF! If enabled, it will cause MAJOR LAG when underground. Use at your own risk!
}

local function yield()
  os.queueEvent("sleep")
  os.pullEvent("sleep")
end


function setMainDirectory(path)
  if not MainFolder then
    MainFolder = path
    
    fileDirectory = {
      MainFolder.. "/MiniAPI",
      MainFolder.. "/MiniAssets",
      MainFolder.. "/MiniMods",
      MainFolder.. "/MiniSaves",
      MainFolder.. "/MiniConfig"
    }

    for i = 1, #fileDirectory do
      if not fs.exists(fileDirectory[i]) then
        fs.makeDir(fileDirectory[i])
      end
    end
  end
end

function getMainDirectory()
	return MainFolder
end

function getAPIDirectory()
	return fileDirectory[1]
end

function getAssetsDirectory()
	return fileDirectory[2]
end

function getModsDirectory()
	return fileDirectory[3]
end

function getSavesDirectory()
	return fileDirectory[4]
end

function getConfigDirectory()
	return fileDirectory[5]
end

function newMap(name, mx, my)
  --[Sets the player's inventory, adding 3 things to it]--
  local playerInventory = InventoryAPI.newInventory()
  InventoryAPI.addItem(playerInventory, 150, 1)
  InventoryAPI.addItem(playerInventory, 223, 1)
  InventoryAPI.addItem(playerInventory, 210, 3)
  
  LevelAPI.setWorldSize(mx, my)
  local sx, sy = term.getSize()
  local newLevel = LevelAPI.newWorld(mx, my)
  local px, py = PlayerAPI.newPlayerPos(newLevel, currentDim)
  local ox, oy = LevelAPI.getOffset()
  local pxo, pyo = px - math.floor(sx / 2), py - math.floor(sy / 2)
  local worldname = name or LevelAPI.getWorldName()
  local invNum = 1

  PlayerAPI.setPlayerCoordinates(px, py)
  LevelAPI.setOffset(pxo, pyo)
  saveMap(newLevel, worldname)

  return newWorld, playerInventory, invNum
end

function saveMap(map, name)
  local folderName = name or LevelAPI.getWorldName()
  local SavesFolder = getSavesDirectory()
  local WorldX, WorldY = LevelAPI.getWorldSize()
  if fs.exists(SavesFolder.. "/" ..folderName) then
    fs.delete(SavesFolder.. "/" ..folderName)
  end
  fs.makeDir(SavesFolder.. "/" ..folderName)

  local pX, pY = PlayerAPI.getPlayerCoordinates()
  local pD = PlayerAPI.getPlayerDirection()
  local OX, OY = LevelAPI.getOffset()
  local pH = PlayerAPI.getPlayerHealth()
  local pE = PlayerAPI.getPlayerEnergy()
  local pM = PlayerAPI.getPlayerMode()
  local levelData = {
    mapX = WorldX,
    mapY = WorldY,
    playerX = pX,
    playerY = pY,
    playerD = pD,
    playerH = pH,
    playerE = pE,
    playerM = pM,
    offsetX = OX,
    offsetY = OY
  }

  local world = fs.open(SavesFolder.. "/" ..folderName.. "/world.data", "w")
  for f = -1, 0 do
    for g = WorldX, WorldY do
      yield()
      for h = WorldX, WorldY do
        local blockName, block = LevelAPI.checkID(map[f][2][g][h].name) 
        local tileName, tile = LevelAPI.checkID(map[f][1][g][h].name) 
        if tile and block then
          world.writeLine(tile.. "-" ..block) 
        else
          world.writeLine(tile) 
        end
      end
    end
  end
  yield()
  world.close()
  local serializedLevelData = textutils.serialize(levelData)
  local worldConfig = fs.open(SavesFolder.. "/" ..folderName.. "/world.config", "w")
  worldConfig.write(serializedLevelData)
  worldConfig.close() 
end

function loadMap(name)
  local SavesFolder = getSavesDirectory()
  local loadingConfig = fs.open(SavesFolder.. "/" ..name.. "/world.config", "r")
  local loadedConfig = loadingConfig.readAll()
  local configData = textutils.unserialize(loadedConfig)
  loadingConfig.close()

  PlayerAPI.setPlayerDirection(configData.playerD)
  PlayerAPI.setPlayerCoordinates(configData.playerX, configData.playerY)
  PlayerAPI.setPlayerHealth(configData.playerH)
  PlayerAPI.setPlayerEnergy(configData.playerE)
  PlayerAPI.setPlayerMode(configData.playerM)
  LevelAPI.setOffset(configData.offsetX, configData.offsetY)

  local newMap = LevelAPI.setMap(configData.mapX, configData.mapY)
  LevelAPI.setWorldSize(configData.mapX, configData.mapY)
  local loadingMap = fs.open(SavesFolder.. "/" ..name.. "/world.data", "r")
  local Assets = LoadAPI.loadAssets()

  for i = -1, 0 do
    yield()
    for j = configData.mapX, configData.mapY do
      for k = configData.mapX, configData.mapY do
        local tile, block
        local keepVar = {}
        local currentLine = loadingMap.readLine()
        for n in string.gmatch(currentLine, "%d+") do
          local newNumber = #keepVar + 1
          keepVar[newNumber] = {}
          keepVar[newNumber] = n
        end
        tile = tonumber(keepVar[1]) or 0
        block = tonumber(keepVar[2]) or 0

        if Assets[tile] then
          newMap[i][1][j][k] = Assets[tile]
        else
          newMap[i][1][j][k] = {}
        end

        if Assets[block] then
          newMap[i][2][j][k] = Assets[block]
        else
          newMap[i][2][j][k] = {}
        end
      end
    end
  end
  loadingMap.close()
  
  local playerInventory = InventoryAPI.newInventory()
  InventoryAPI.addItem(playerInventory, 150, 1)
  InventoryAPI.addItem(playerInventory, 223, 1)
  InventoryAPI.addItem(playerInventory, 210, 3)

  return newMap, playerInventory, 1
end

local function saveServerList()
  fs.delete(getMainDirectory().. "/servers.data")
  local saveServerList = fs.open(getMainDirectory().. "/servers.data", "w")
  saveServerList.write(textutils.serialize(serverList))
  saveServerList.close()
end

local function loadServerList()
  local serverListRaw, serverListed
  if fs.exists(getMainDirectory().. "/servers.data") then
    serverListRaw = fs.open(getMainDirectory().. "/servers.data", "r")
    serverListed = textutils.unserialize(serverListRaw.readAll())
    serverListRaw.close()
  end
  serverList = serverListed or {}
end

function getServerList()
  loadServerList()
  return serverList
end

function addToServerList(name, id, channel)
  if name and id and channel then
    local n = #serverList + 1
    serverList[n] = {}
    serverList[n].name = name
    serverList[n].id = id
    serverList[n].channel = channel
  end
  saveServerList()
  loadServerList()
end

function removeFromServerList(name, id, channel)
  local remove = {}
  if name and id and channel then
    for i = 1, #serverList do
      if serverList[i].name == name and serverList[i].id == id and serverList[i].channel == channel then
        remove[#remove + 1] = i
      end
    end
  end

  for i = 1, #remove do
    table.remove(serverList, remove[i])
  end

  saveServerList()
  loadServerList()
end

local function savePlayerSettings()
  local file = fs.open(getMainDirectory().. "/settings.data", "w")
  file.write(textutils.serialize(playerData))
  file.close()
end

function getPlayerSettings()
  if not fs.exists(getMainDirectory().. "/settings.data") then
    local file = fs.open(getMainDirectory().. "/settings.data", "w")
    file.write(textutils.serialize(playerData))
    file.close()
  end

  local file = fs.open(getMainDirectory().. "/settings.data", "r")
  local data = textutils.unserialize(file.readAll())
  file.close()

  return data
end

function setPlayerSetting(setting, value)
  if playerData[setting] then
    playerData[setting] = value
  end
  savePlayerSettings()
end